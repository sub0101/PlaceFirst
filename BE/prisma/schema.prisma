// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id       String @id @default(uuid())
  user_id  String @unique
  email    String @unique
  password String
  role     String @default("Student")
}

model Student {
  id         String      @id @default(uuid())
  image String ?
  name       String
  contact    String?
  studentId  String      @unique
  email      String      @unique
  branch     String?
  course     String?
  department String?
  debarred Boolean ? @default(false)
  applicant  Applicant[]
  education Education[]
}


model Admin {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  contact  String?
  adminId  String  @unique
  position String?
}

model Company {
  id                 String              @id @default(uuid())
  name               String              @unique
  location           String
  industry           String
  website            String?
  contactPerson      String
  contactEmail       String              @unique
  contactPhone       String              @unique
  visitDate          String
  status String?
  addedAt            DateTime            @default(now())
  companyApplication CompanyApplication?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model CompanyApplication {
  id                   String      @id @default(uuid())
  companyId            String      @unique
  company              Company     @relation(fields: [companyId], references: [id])
    eligibilityCriteria  String?
    studentsSelected     Int         @default(0)
    jobTitle             String
    jobDescription       String
    ctc                  String?
    stipend              String?
    recruitmentMode      String
    internshipDuration String?
    bondPeriod           String?
    openRoles            Int
    selectionProcess     String
    applicants           Applicant[]
    interviewDate String?
    pptDate String?
    assessmentDate String?
    tier String?
    allowedCourses String[]
    allowedBranches String[]
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model Applicant {
  id                   Int                @id @default(autoincrement())
  studentId            String
  Student              Student            @relation(fields: [studentId], references: [id])
  companyApplicationId String
  CompanyApplication   CompanyApplication @relation(fields: [companyApplicationId], references: [id])
  backlog Boolean ? @default(false)
  cgpa Int?
  precentage Int?
  resumeUrl            String?
  status               String? @default("pending")
  appliedAt            DateTime           @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id Int @id @default(autoincrement())
  studentId String
  student Student @relation(fields: [studentId] , references: [id])
  degree String
  year String
  institution String
  currentEducation Boolean?

}